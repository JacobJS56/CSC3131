# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

jobs:
  build-test-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Prettify code
        uses: creyD/prettier_action@v4.1
        with:
         # This part is also where you can pass other options, for example:
          prettier_options: --write **/*.{js,md}
  
  build-test-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

      - name: Run the tests and generate coverage report
        run: npm test -- --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
    
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            /node_modules
          key: ${{ runner.os }}-${{ hashFiles('/server/package-lock.json') }}
          
  build-aws-server:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-server
        working-directory: ./server
        env:
          ECR_REGISTRY: csc3131
          ECR_REPOSITORY: csc3131
        run: |
          docker build -t server .
          docker tag csc3131:latest 386243566449.dkr.ecr.eu-west-2.amazonaws.com/csc3131:server
          docker push 386243566449.dkr.ecr.eu-west-2.amazonaws.com/csc3131:server

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def2
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: server/task-definition.json
          container-name: sample-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: server
          cluster: csc3131
          wait-for-service-stability: true

  build-aws-client:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-react
        working-directory: ./client
        env:
          ECR_REGISTRY: csc3131
          ECR_REPOSITORY: csc3131
        run: |
          docker build -t client .
          docker tag csc3131:latest 386243566449.dkr.ecr.eu-west-2.amazonaws.com/csc3131:client
          docker push 386243566449.dkr.ecr.eu-west-2.amazonaws.com/csc3131:client

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: client/task-definition.json
          container-name: sample-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: client
          cluster: csc3131
          wait-for-service-stability: true

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
