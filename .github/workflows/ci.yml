
# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - run: npm ci
      working-directory: server
    - run: npm run build --if-present
      working-directory: server
    - run: npm test
      working-directory: server

    - name: Run the tests and generate coverage report
      working-directory: ./server
      run: npm test -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          /server/node_modules
        key: ${{ runner.os }}-${{ hashFiles('/server/package-lock.json') }}
        
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: jacobs56/csc3131:server
    
    - name: Build and push
      id: docker_build2
      uses: docker/build-push-action@v2
      with:
        context: ./client
        file: ./client/Dockerfile
        push: true
        tags: jacobs56/csc3131:client

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Read secrets from AWS Secrets Manager into environment variables
      uses: say8425/aws-secrets-manager-actions@v1
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2
          OUTPUT_PATH: '.env'
          
    - name: Translate ENV variables
      run: |
          printenv
          
    - name: Build & tag docker image
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aws-ecs-typescript-api
          IMAGE_TAG: aws-ecs-typescript-api-${{ github.sha }}
          
    - run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Push image to Amazon ECR
      id: push-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aws-ecs-typescript-api
          IMAGE_TAG: aws-ecs-typescript-api-${{ github.sha }}
      run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Download task definition
      run: aws ecs describe-task-definition --task-definition aws-ecs-typescript-task --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: update-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: task-definition.json
          container-name: aws-ecs-typescript-container
          image: ${{ steps.push-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: deploy-task-def
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: aws-ecs-typescript-service
          cluster: aws-ecs-typescript-api
    
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
